package pattern_maining;

//import java.io.BufferedReader;
//import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
//import java.util.HashMap;
import java.util.List;
public class Pattern_Maining {

	public static void main(String[] args) throws IOException {
		String dirStr = "";//"C:\\java\\Pattern_Maining";
		String separator = "";//"\\";
		String inputFileName = "sample_in.txt";

		ReadWrite rw = new ReadWrite(dirStr + separator+inputFileName); // 読み書きクラス
		List<List<Integer>> ll = rw.read(); // ファイルから読み込み買い物籠リスト作成
		
		Mine m = new Mine(ReadWrite.itemSize); // 各買い物籠の評価値を計算するクラス
		//inokuchi Mineのコンストラクタは，ReadWriteのreadが少なくとも1回動作していることを前提に作られています．
		//そうでない場合もこのコンストラクタが動作するように，ReadWrite.itemSizeを引数で与えるように修正しました．
		//そのほうが，Mineのコンストラクタの汎用性が高いです．ここでは，既にrw.read();を呼んでいて，
		//ReadWriteのreadが1回動作していることが保証されるのでReadWrite.itemSizeを引数として与えることは問題ないです．
		
		List<Integer> l = new ArrayList<Integer>();
		int bottom = Integer.parseInt(args[0]);
		m.mine(l, ll, bottom); // ここで計算開始 再帰処理は関数内部で行う

		//HashMap<List<Integer>, Integer> sup = m.returnSup(); // 計算後、支持度をMineクラスから受け取る

		//for (List<Integer> key : sup.keySet()) // 閾値を超えた支持度の組み合わせを表示
		//System.out.println(key + " " + sup.get(key) + "回");
		//inokuchi 商品数をnとすると，解となる候補は2のn乗-1個存在します．
		//ここでは，n=10なので，解の候補の個数は高々1023ですが，nが数万以上の場合でもこのプログラムが動作するように
		//設計できているとよいプログラムだといえます．すべての解をメモリ上に保持することは現実的ではないので，
		//解を見つけるたびに，出力する（標準出力やファイルへ）ほうが適切となります．
		//そこで，表示の部分はMineクラスのmineに移動させました．
		

		//br.close();
	}
}
