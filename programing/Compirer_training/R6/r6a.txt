科目名: コンパイラ実習
課題: R6a
番号: 6689
氏名: 矢嶋悠太
作成: 2018年10月21日

----------------------------------------

[課題6.1]
7 や ’x’ 等の「定数式」の実行メソッド Exp constant::run を
作成せよ.

[実行結果]
user@user-THINK /cygdrive/c/programing/Compirer_training/R6
$ ./a
7
120

正しく実行できていることが確認できた。
工夫した点はないが、これから行うrunメソッドのために、今まで
宣言してきたグローバル変数やローカル変数、関数宣言などをすべて
mapで名前とのペアで管理していかなければならないのは何となくわ
かって来たので、非常に複雑な値の受け渡しや参照などが必要だと
感じた
----------------------------------------

[課題6.2]
 a や x 等, 式中に現れる変数の実行メソッド Exp variable::ru
n を作成せよ.
1. ast.h の class Exp variable に, run の宣言を追加せよ.
2. ast.cpp 中に Exp variable::run の実装を作れ

[実行結果]
user@user-THINK /cygdrive/c/programing/Compirer_training/R6
$ ./a
4
10
2000
そのような変数は宣言されていません0

この課題では最初、Exp_variable::runメソッドの実装の方で、もし
ローカル変数表にもグローバル変数表にもなければ標準出力でそのよ
うな変数は宣言されていないという内容の出力をするのみだったため
、int型を返すように設計していたのにも関わらず、return文を忘れ
ていたため、エラー文のあとに大きな不規則な数が出力されてしま
った。最初はこの原因が分からなかったが、途中から気付くことがで
きた。修正としてはエラー文を出した後に"0"を返すようにした

----------------------------------------

[課題6.3]
+式 や -式 等の「単項演算式」の実行メソッド Exp operation1::r
un を作成せよ.
1. 単項演算式の計算は, まずオペランド (operand()) の run メソ
ッドを実行してその値を求め, それに対して演算子 (operation())
 に対応した演算を行い, 得られた値を返せばよい. 例えば, オペラ
ンドの値が 3 になり, 演算子が Operator MINUS であれば, -3 を返
せばよい

[実行結果]
user@user-THINK /cygdrive/c/programing/Compirer_training/R6
$ ./a
-31

これに関してはオペレーターに対応した計算をさせるために
オペレーターが　"-"なら-数値　
	　　　　"+"なら+数値
というようにswitch文にしてそのまま分岐をさせるようにした
ただこのプログラムだと後々オペレーターの種類が増えたときにコー
ドが冗長になってしまうため他に関数を用意して効率的にするよう
にするべきだと思った。

----------------------------------------

[課題6.4]
式 1 + 式 2 のような「二項演算式」の実行メソッド Exp operatio
n2::run を作成せよ.
1. 考え方は単項演算式と同様である.
2. 次のようなプログラムで動作を確認せよ

[実行結果]
user@user-THINK /cygdrive/c/programing/Compirer_training/R6
$ ./a
32
64

これも先ほどと同様、考えられる種類分のオペレーター演算子に対
応した計算を行えるようにswitch文で分岐させるようにした。
switch文とif文は分岐という点では似ているが、見た目や理解のし
やすさではswitch文、拡張性としてはif文の方が使いやすいと思っ
た。

----------------------------------------

[課題6.5]
gcd(a,b+5) や getint() 等の関数呼出しを表す「関数式」の実行メ
ソッド Exp function::run を作成せよ.
1. ast.cpp 中に Exp function::run を実装する.

[実行結果]
user@user-THINK /cygdrive/c/programing/Compirer_training/R6
$ ./a
n = 7
ここで getint が呼ばれるので, 整数を入力
3
getint() = 3
ここで getchar が呼ばれるので, 文字を入力
a
getchar() = a
次に putint(5); が呼ばれる
5
次に putchar('U'); が呼ばれる
U
最後に asum(n); が呼ばれる
asum(n) = 7

この課題を始めてやった時はエラーなど特に問題はなく実装するこ
とができた。しかし、課題6.14まで進み、Function::runの実装を
より細かくした後、この6.5の課題を実行するとasum(n)のところで
コアダンプが起きてしまった。これは始めはまだFunction::run()
メソッドが実装できていないため先にmainプログラムの中で
func["asum"] = 0;  // ここが原因
  
lvar["n"] = 7;
という様に宣言するようにプログラムしていたが、
実装が進めばわざわざ上の様に別に宣言する必要がないため、そこ
で二重に？funcリストの追加などがされているのか、と考察してみ
たが詳しい原因はまだわからなかったため、まだまだ理解不足だと
感じた。
(追記)
先にr6_5.cppの
func["asum"] = 0;　により
std::map<string, Function*> の部分で<"asum", 0>
というありえないマップを作った状態でExp_function::run()メソッ
ドの
if ((p=func.find(name()))!=func.end()) {
      Function* f = p->second; //ここで0代入
      return f->run(func,gvar,i_args);
の部分で"asum"が検索に引っ掛かり、
Function* f = 0;
が代入され、Functionクラスのタイプが代入されていない状態で
return f->run()と実行してしまったため問題が起きてしまったので
はないかと考えた。
------------------------------------

[課題6.6]
「代入文」の実行メソッド St assgin::run を作成せよ.
1. run は, 全ての「文」に共通な仮想関数として実装する. まず, 抽象基底クラス Statement に run を宣言
する.

[実行結果]
user@user-THINK /cygdrive/c/programing/Compirer_training/R6
$ ./a
before
i = 100

正しく実行されていることが確認できた。
左辺と右辺では代入する側とされる側で違うため処理がそれぞれ違う
ことが分かった

-----------------------------------

[課題6.7]
「文のリスト」の実行メソッド St list::run を作成せよ.
1. 基本的にリスト中の文を順番に実行するだけなので, iterator 
で要素を順にたどりながら各要素の run を起
動ればよい.
ただし, 途中で return 文が実行された場合は, そこで実行を打ち
切って返り値を返さなければならない. 逆に, return 文が一度も
実行されなかった場合は, 最後に Return t(false,0) を返さなけれ
ばならない.

[実行結果]
user@user-THINK /cygdrive/c/programing/Compirer_training/R6
$ ./a
s = 0
i = -5
n = 5

この課題をやって特に感じたことだが、このように丁寧にクラス
構造を整えたうえでコーディングを行うとSt_listのような一見
一番実行量の多そうなクラスのrun()メソッドが簡潔にできるとい
う事が分かった。

-----------------------------------

[課題6.8]
「if 文」の実行メソッド St if::run を作成せよ.
1. まず, 条件部 condition() を実行して値を求め, 真 (0 以外) 
なら then part() を, そうでなければ
else part() を実行すればよい.
ただし, 条件部が偽でも else part() が存在しなければ実行しない
. (同様に, 条件部が真でも then part()
が存在しなければ実行しない.)4
また, then part() の run の返り値 rd の rd.val is returned が
 true なら then part() の中で return
文が実行されたので, その場で rd を返す. else part() について
も同様. 一番最後まで来た場合には,
Return t(false,0) を返す. (前課題の St list とよく似ているので
, それを参考にせよ.)

[実行結果]
user@user-THINK /cygdrive/c/programing/Compirer_training/R6
$ ./a
s = 15
s = 17

正しく動作していることが確認できた
cond_部分で計算を行い其の返り値をもとにどちらかに分岐させ、
分岐させた先で適したSt_listを実行すればよいことが分かった

-----------------------------------

[課題6.9]
「while 文」の実行メソッド St while::run を作成せよ.
4condition() が NULL ならエラーにすべきだが, then part() や
 else part() は NULL でもエラーにしてはならない.

1. 考え方は if 文と同様である.
2. 次のようなプログラムで動作を確認せよ

[実行結果]
user@user-THINK /cygdrive/c/programing/Compirer_training/R6
$ ./a
i = 4
n = 3
s = 12

正しく実行できていることが確認できた
この課題も同じく、while()のcond部分の計算値が0、つまり真の間
のみ中の実行部分を繰り返す、という様にプログラムをすることで
スムーズにコーディングができた。

------------------------------------

[課題6.10]
「return 文」の実行メソッド St return::run を作成せよ

[実行結果]
user@user-THINK /cygdrive/c/programing/Compirer_training/R6
$ ./a
i = -3
n = 3
s = 0
rd.val_is_returned = 1
rd.return_val = 6

上記の様に正しく実行できていることが確認できた
構造体を用いることによって、二種類の二つ組の返り値を返せるよう
実装し、そのboolean型によって、すでにreturn文があったかどうかを
判断する、という考え方が思いつかなかったので非常に勉強になった
このように様々なクラス間で状態を知らせあう様にするには、全クラ
スが共通して使える変数や構造体を使うと効果的であることが分かっ
た

-------------------------------------

[課題6.11]
「関数呼び出し文」の実行メソッド St function::run を作成せよ.
1. function の run を呼び出して実行し, Return t(false,0) を返
す.
2. 次のようなプログラムで動作を確認せよ

[実行結果]
user@user-THINK /cygdrive/c/programing/Compirer_training/R6
$ ./a
-3249

上記の様に正しく実行できていることが確認できた
この結果から、しっかりreturn文が呼ばれているタイミングを把握
出来ていることが分かった。

---------------------------------------------------------

[全体の感想]
今回は単なる表示ではなく実装という事で難易度が高かったが、この
ような時こそ、クラス間の関係をはっきりさせたうえで、少しづつ
理解していきコーディングをしていくことが大切だと分かった。
今回は特にクラス間での参照や値の受け渡しなどが多かったため、実
行されている様子をコード越しに目で追うようにするのは非常に大変
だとわかった。







