科目名: コンパイラ実習
課題: R2
番号: 6689
氏名: 矢嶋悠太
作成: 2018年10月5日

----------------------------------------

[課題 2.1]
次のプログラムは, 名前を入力するとその電話番号を出力するプ
ログラムである. 名前と電話番号はEntry というクラスの配列で
記憶している
このプログラムの空白を適当に埋めて完成させよ

[実行結果]
検索用文字列を入力して下さい: Kw
Kwansei Gakuin University (PR) 0798-54-6017
Kwansei Gakuin University (KSC) 565-7600

正しい結果が得られた
この課題を通しても分かったことだが、
e[i].phone.find("079-")
のようにインスタンス変数.メンバ変数.メンバ関数、という様にとて
もJAVAに似た構文の書き方でc言語に慣れていた自分にとっては新鮮
だったが、c++はオブジェクト指向日欧しているという事からこの構文
を使うことが理解できた
正しいメンバ変数や関数をレファレンスから行えるようにできるよう
になりたいと感じた

--------------------
[課題2.2]
前の演習 2.1 で作成した [List 2.3] のプログラムを, 通常
の配列の代わりに vector<Entry> を用いて書き換えよ. 24〜
28 行目のデータの追加には push back を用いよ.

[実行結果]
検索用文字列を入力して下さい: Kw
Kwansei Gakuin University (PR): 0798-54-6017
Kwansei Gakuin University (KSC): 565-7600

変更を加えても正しく動作した
新しいコンテナクラスのvector配列の使い方を学んだ。この時点では
あまり課題2.1の配列と違いを感じなかったが後半に連れてメリットを
感じることが出来た。特にコンテナクラスは基本的にアルゴリズムに
関するメソッドが共通という事からデータの型にとらわれないアルゴ
リズムができるということはよいと感じた

--------------------
[課題2_3]
次のプログラムは, 学生の成績データを管理するものである. クラス Record は,
一人の学生の [番号(id), 名前 (name), 点数 (score)] を記録
するもので, 出力用の関数 (operator<<) が定義される. 成績
データは, クラス Seiseki の data に Record のリストとして
記録されている.
空白を埋め, プログラムを完成させよ

[実行結果]
*** 成績簿 ***
[7001] aaaa : 89
[7123] bbbb : 70
[7013] cccc : 55
[7200] dddd : 99
[7087] eeee : 83
> 7001
[7001] aaaa : 89
> 5
not found
> 0
*** 成績簿 ***
[7001] aaaa : 89
[7123] bbbb : 70
[7200] dddd : 99
[7087] eeee : 83

この課題で作る関数の内の三つ目のerase_worst関数について
自分なりに工夫した点としては
最も悪かった成績の"点数"では無く"ポインタ、アドレス"を求める必
要があったため、現時点での暫定の最低点を保持する変数だけではな
く、暫定最低点をもつlist内のアドレスを保持する変数も必要だとい
うことがあった。このことはプログラミング実習３でも習ったことの
で比較的スムーズに考えることが出来た。

-------------------
[課題2.4]
演習 2.1 で作成した [List 2.3] と同様の動作をするプログラ
ムを map を用いて書け.
map<std::string,std::string> を用い, 名前をキーとして電
話番号を求められるようにせよ.

[実行結果]
検索用文字列を入力して下さい: Kw
Kwansei Gakuin University (KSC)565-7600
Kwansei Gakuin University (PR)0798-54-6017

演習2_1で作成したプログラムと同じ動作の確認ができた
この課題では、今まで使ってきた一種類のみの情報を格納する配列で
はなく、二種類の情報を紐づけしながら格納する配列のmapについて
学習をした。実装も行いやすく今まで習ってきた配列と昨日は違うよ
うに見えてメソッドやイテレータの使い方など今回の課題の範囲内に
ついてはあまり違いがなかったため、新しい配列に関しても扱いやす
く感じることが出来た

-------------------
[課題2.5]
[List 2.11] のプログラムは, コンテナとして使用している
list を vector に取り換えてもそのまま動く. これを確かめよ.

[実行結果]
user@user-THINK /cygdrive/c/programing/Compirer_training
$ ./a
>6
not found

user@user-THINK /cygdrive/c/programing/Compirer_training
$ ./a
>2
2 found
2 found again

配列内の数字を正しくカウントするプログラムが作れた
第一引数から第二引数まで第三引数の要素を探す便利なfind関数が、
listコンテナクラスだけでなくvectorコンテナクラスでも全く書き加
えなくても動作していることが確認できた。このことから、配列に関
する操作を提供するメソッドはコンテナクラスに共通していることが
わかった。
またプログラムに関しては、find関数を呼び出し返り値がイテレータ
だった場合は見つけたとして出力を行い、そうでなければ出力を行わ
ないという分岐を行っていることが分かった


-------------------
[課題2.6]
前の演習 2.2 で作成した vector を用いた Phonebook のデー
タに対し, 名前順のソートと電話番号順のソートを行ってみよ.

[実行結果]
ソート前
Kwansei Gakuin University (PR): 0798-54-6017
Kwansei Gakuin University (KSC): 565-7600
Kobe University: 078-881-1212
Sanda Woodytown SATY: 564-8800
Sanda Hotel: 564-1101

ソート後
Kobe University
Kwansei Gakuin University (KSC)
Kwansei Gakuin University (PR)
Sanda Hotel
Sanda Woodytown SATY

078-881-1212
0798-54-6017
564-1101
564-8800
565-7600

名前、電話番号それぞれについてソートを行っていることが確
認できた
sort(e.begin(), e.end(), by_name());
sort(e.begin(), e.end(), by_phone());
のようにnameメンバーとphoneメンバーそれぞれについてソートを行い
出力もそれぞれについて分けて出力を行うようにするとうまくソートさ
れたものが出力されるようになった。比較関数オブジェクトに関しては
理解不足なのはわかったためレファレンスをみたり、授業で聞くなどし
て理解を深めたい


--------------------
[全体の感想]
この課題を通してコンストラクタの理解や、JAVAで習ったオブ
ジェクト指向に近い考え方を学ぶことが出来てよかった。
またoperatorのオーバーロードについてはこの会ではあまり理
解出来なかったがR3章で何度も使っているうちに理解ができる
ようになってきたので、レジュメを読むだけでなく自分でコーデ
ィングして確かめる演習力も必要だと実感した