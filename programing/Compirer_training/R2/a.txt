package cls;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

public class Clustering {

	public static void main(String[] args) throws IOException {
		// TODO 自動生成されたメソッド・スタブ
		String dirStr = "C:\\java\\SVM";
		String separator="\\";
		String inputFileName = "iris.data.kwansei.txt";
		String outputFileName1 = "example_train.txt";
		String outputFileName2 = "example_predict.txt";

		BufferedReader br = new BufferedReader(new FileReader(dirStr + separator+inputFileName));
		BufferedWriter bw1 = new BufferedWriter(new FileWriter(dirStr + separator+outputFileName1));
		BufferedWriter bw2 = new BufferedWriter(new FileWriter(dirStr + separator+outputFileName2));

		String buffer;
		String[] buffer_s;
		int i=0, j, k, x, y;
		double[][] c = new double[100][5];

		while ((buffer = br.readLine()) != null) {
			//System.out.println(i + " " + buffer);
			buffer_s = buffer.split(",");

			c[i][0] = i;
			for(j=0; j<4; j++) c[i][j+1] = Double.parseDouble(buffer_s[j]);
			i++;
		}

		System.out.println();

		Distance dis = new Distance(); //ユークリッド距離計算クラス
		double[][] dist = new double[100][100]; //すべての二点間の距離
		double m, min=100;
		int i_=0, j_=0;
		ArrayList<Integer> iG, jG;
		//各２点間の計算 ただし初期化
		for(i=0; i<99; i++) {
			for(j=i+1; j<100; j++) {
				dist[i][j] = dis.calc(c[i], c[j]);
				dist[j][i] = dist[i][j];
			}
			dist[i][i] = 0;
		}

		//表示テスト
		/*
		for(i=0; i<100; i++) {
			System.out.print(i + " ");
			for(j=0; j<100; j++) System.out.printf("%.3f ", dist[i][j]);
			System.out.println();
		}
		*/

		Map<Integer, ArrayList<Integer>> cmap = new HashMap<Integer, ArrayList<Integer>>();
		for(i=0; i<100; i++) {
			cmap.put(i, new ArrayList<Integer>());
			cmap.get(i).add(i);
		}

		for(k=0; k<98; k++) {
			min=100;
			for(i=0; i<99; i++) {
				for(j=i+1; j<100; j++) {
					if(cmap.get(i)!=null && cmap.get(j)!=null)
						if((m = dis.min(cmap.get(i), cmap.get(j), dist)) < min ) { //ここでグループij間の最小値取得
							min = m;
							i_ = i; j_ = j;
						}
					}
				}
			System.out.printf("(i, j) = (%d, %d) min = %.2f\n", i_, j_, min); //テスト
			//ここから距離マップ、およびグループタグの更新
			iG = cmap.get(i_); jG = cmap.get(j_);
			for(i=0; i<iG.size(); i++) {
				for(j=0; j<jG.size(); j++) {
					dist[iG.get(i)][jG.get(j)] = 100;
					dist[jG.get(j)][iG.get(i)] = 100;
				}
			}
			cmap.get(i_).addAll(cmap.get(j_));
			cmap.remove(j_);
			for(i=0; i<100; i++) {
				if(cmap.get(i)!=null) System.out.print(cmap.get(i) + " ");
				else ;
				if(i%10==0 && i>0) System.out.println();
			}
			System.out.println();
			}

		for(i=0; i<100; i++) {
			if(cmap.get(i)!=null) {
				Collections.sort(cmap.get(i));
				System.out.println(cmap.get(i));
			}
		}

		br.close();
		bw1.close();
		bw2.close();
	}
}