divide_by_three([], [], []). # 事実節⓵
divide_by_three([L|L1], [L|L2], L3) :-
mod(L, 3) =:= 0, divide_by_three(L1, L2, L3). #ルール節⓵
divide_by_three([L|L1], L2, [L|L3]) :-
mod(L, 3) =\= 0, divide_by_three(L1, L2, L3).　#ルール節⓶


(i)論理的意味
与えられたリストL1の頭が3で割り切れればリストL2の頭に入れ、割り切れなければ
リストL3の頭に入れる操作をし、１サイズ小さいリストについて再帰処理を行う
事実節は空集合の3で割り切れる、割り切れない数はともに空集合であるという意味

(ii)具体的動作 divide_by_three([1,2,3,4,5,6], L2, L3)
入力されたdevide_by_three([1,2,3,4,5,6], L2, L3)と単一化できる
節を探す。→ルール節⓶と単一化し、L3のヘッドに１を代入
再帰処理一回目に移る

再帰⓵
入力されたdevide_by_three([2,3,4,5,6], L2, L3)と単一化できる節を
探す。→ルール節⓶と単一化し、L3のヘッドに2を代入
再帰処理二回目に移る

再帰⓶
入力されたdevide_by_three([3,4,5,6], L2, L3)と単一化できる節を
探す　→ルール節⓵と単一化し、L2のヘッドに3代入
再帰処理三回目に移る

再帰⓷
入力されたdevide_by_three([4,5,6], L2, L3)と単一化できる節を
探す　→ルール節⓶と単一化し、L3のヘッドに代入
再帰処理四回目に移る

再帰⓸
入力されたdevide_by_three([5,6], L2, L3)と単一化できる節を
探す　→ルール節⓶と単一化し、L3のヘッドに代入
再帰処理誤解目に映る

再帰⓹
入力されたdevide_by_three([6], L2, L3)と単一化できる節を
探す　→ルール節⓵と単一化し、L2のヘッドに代入
再帰処理六回目に移る

再帰⓺
入力されたdevide_by_three([], L2, L3)と単一化できる節を
探す　→事実節と単一化し、L2, L3に解として[]を代入する

ルール節のループからやっと事実節で解を見つけたため再帰処理は終わり
今までのループを逆向きに解を代入していく
L2 → [], 6, 3の順に値を積み重ねるように代入されていく
L1 → [], 5,4,2,1の順に値を積み重ねるように代入されていく
